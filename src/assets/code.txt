#include<Servo.h>
#define echoDoor 3 // attach to pin Echo of HC-SR04 for Door
#define trigDoor 2 //attach to pin Trig of HC-SR04 for Door

#define echoTrash 11 // attach to pin Echo of HC-SR04 for Trash
#define trigTrash 10 //attach to pin Trig of HC-SR04 for Trash

#define compressLed 8 //attach to green led 
#define fullLed 6 //attach to red led 
#define notiLed 7 //attach to yellow led 
#define alarm 4 //attach to alarm 

float binHeight=17;//cm ,the height of the bin
float maxTrash=11;//cm ,the max height of the trash

Servo MyServo;
int newTrash = LOW; //if HIGH mean someone throw in new trash
int full = LOW; //if HIGH mean need maintainance
float trashPercentage;

//CUSTOM this
int openDoor = 15; //distance that trigger the door to open
int closePos = 85; //position of the servo when the door is closed
int openPos =25; //position of the servo when the door is opened

int checkMotion(){
  int doorOpen = LOW;
  long duration;
  int distance = 0;
  
  // Clears the trigPin condition
  digitalWrite(trigDoor, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigDoor, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigDoor, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoDoor, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  
  // Displays the distance between sensor and foreign object on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  return distance;
}

void doorGuard(){
  
  int distance=checkMotion();
  int doorOpen = LOW;
  int pos;

  if(distance < openDoor){
    delay(500);
    if (doorOpen == LOW) {
      Serial.println("Door Open!"); 
      //opening door
      for(pos=closePos; pos>=openPos; pos--){
        MyServo.write(pos);
        delay(15);
      }
      doorOpen = HIGH; // update variable state to HIGH
      newTrash = HIGH; // signal there is new trash 
    }
  } //need somethin to check when to close door;
    delay(5000);
    if (doorOpen == HIGH){
      Serial.println("Door closed!");
      //closing door
      for(pos=openPos; pos<=closePos; pos++){
        MyServo.write(pos);
        delay(15);
      }
      doorOpen = LOW; // update variable state to LOW
    }
}

int checkTrash(){
  long duration;
  float distance = 0;
  float trashHeight = 0;
  
  // Clears the trigPin condition
  digitalWrite(trigTrash, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigTrash, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigTrash, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoTrash, HIGH);
  // Calculating the distance between trash and sensor
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  //calculate the height of trash
  trashHeight = binHeight-distance;
  
  // Displays the height of trash on the Serial Monitor
  Serial.print("Trash Height: ");
  Serial.print(trashHeight);
  Serial.println(" cm");

  return trashHeight;
}

void trashGuard(){
  digitalWrite(compressLed, HIGH);
  Serial.println("Compressing... ...");
  //can custom this to change the alarm rythm
  for(int i=0; i<10; i++){
      digitalWrite(alarm, HIGH);
      delay(500);
      digitalWrite(alarm, LOW);
      delay(500);
    }
  digitalWrite(compressLed, LOW);

  //get the heigh of the trash
  float trashHeight = checkTrash();

  trashPercentage = (trashHeight/maxTrash)*100;

  // Displays the percentage on the Serial Monitor
  Serial.print("Trash Percentage: ");
  Serial.print(trashPercentage);
  Serial.println(" %");
  
  if(trashPercentage >= 80){
    //need to trigger led,alarm,etc
    delay(500);
    digitalWrite(notiLed, HIGH);
    Serial.println("Notification sent!!");
    //can custom this to change the alarm rythm
    for(int i=0; i<3; i++){
      digitalWrite(alarm, HIGH);
      delay(500);
      digitalWrite(alarm, LOW);
      delay(300);
    }
  }
  
  if(trashPercentage >= 95){
    //need to trigger led,alarm,etc 
    delay(500);
    Serial.println("Dustbin need maintainance");
    digitalWrite(fullLed, HIGH);
    digitalWrite(notiLed, HIGH);  
    full = HIGH;
    //can custom this to change the alarm rythm
    for(int i=0; i<3; i++){
      digitalWrite(alarm, HIGH);
      delay(800);
      digitalWrite(alarm, LOW);
      delay(500);
    } 
  }
  
}

void setup() {
  
  pinMode(trigDoor, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoDoor, INPUT); // Sets the echoPin as an INPUT
  pinMode(trigTrash, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoTrash, INPUT); // Sets the echoPin as an INPUT

  pinMode (compressLed, OUTPUT);
  pinMode (fullLed, OUTPUT);
  pinMode (notiLed, OUTPUT);
  pinMode (alarm, OUTPUT);

//  used to test the led circuit
//  digitalWrite(compressLed, HIGH);  
//  digitalWrite(fullLed, HIGH);  
//  digitalWrite(notiLed, HIGH);  

  MyServo.attach(13);
  Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
}

void loop(){

  if(full == LOW){
    doorGuard();
    if(newTrash==HIGH){
      trashGuard();
      newTrash = LOW;
    }
  }

}

  
